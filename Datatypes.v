Require Import String.
Require Import Parser.

Inductive token_inductive :=
    | EOF'tok : unit -> token_inductive
    | IMM'tok : nat -> token_inductive
    | OPCODE'tok : string -> token_inductive.

(*
    Helper function to make expressions in get_token more readable.
    Essentially, get_sst just takes a terminal and a value of its
    corresponding semantic type, returning a token. This should
    likely be generated by "menhir --coq", but isn't.
*)
Definition get_sst (t : Gram.terminal) (sst : Gram.symbol_semantic_type (Gram.T t)) : Gram.token :=
    existT (fun t' => Gram.symbol_semantic_type (Gram.T t')) t sst.

Definition get_token (ti : token_inductive) : Aut.GramDefs.token :=
    match ti with
        | EOF'tok u =>
            get_sst Gram.EOF't tt
        | IMM'tok n =>
            get_sst Gram.IMM't n
        | OPCODE'tok str =>
            get_sst Gram.OPCODE't str
    end.
